output_par =
foreach(i = 1:10, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = aa(c(i:100), 3)
output
}
stopCluster(cl) # stop the cluster in the end!!
(end.time = proc.time() - start.time)
output_par
aa = function(x, k){
library(zoo)
y = rollmean(x, k) * 10
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:10, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = aa(c(i:20), 3)
output
}
stopCluster(cl) # stop the cluster in the end!!
(end.time = proc.time() - start.time)
output_par
#### Define the functions ####
aa = function(x, k){
library(zoo)
y = rollmean(x, k) * 10
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:10, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = aa(c(i:20), 3)
output
}
stopCluster(cl) # stop the cluster in the end!!
(end.time = proc.time() - start.time)
output_par
aa = function(x, k){
library(zoo)
y = rollmean(x, k) * 10
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:10, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = aa(c(i:10), 3)
output
}
stopCluster(cl) # stop the cluster in the end!!
(end.time = proc.time() - start.time)
output_par
aa = function(x, k){
library(zoo)
y = rollmean(x, k) * 10
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:10, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = aa(c(i:15), 3)
output
}
stopCluster(cl) # stop the cluster in the end!!
(end.time = proc.time() - start.time)
output_par
if (!require("foreach")) install.packages("foreach",repos = "http://cran.us.r-project.org")
if (!require("doParallel")) install.packages("doParallel",repos = "http://cran.us.r-project.org")
if (!require("doSNOW")) install.packages("doSNOW",repos = "http://cran.us.r-project.org")
library(foreach)
library(doParallel)
library(doSNOW)
#### Define the function ####
aa = function(x, k){
if (!require("zoo")) install.packages("zoo",repos = "http://cran.us.r-project.org")
library(zoo)
y = rollmean(x, k) * 10
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:10, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = aa(c(i:15), 3)
output
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
if (!require("foreach")) install.packages("foreach",repos = "http://cran.us.r-project.org")
if (!require("doParallel")) install.packages("doParallel",repos = "http://cran.us.r-project.org")
if (!require("doSNOW")) install.packages("doSNOW",repos = "http://cran.us.r-project.org")
if (!require("zoo")) install.packages("zoo",repos = "http://cran.us.r-project.org")
library(foreach)
library(doParallel)
library(doSNOW)
#### Define the function ####
aa = function(x, k){
library(zoo)
y = rollmean(x, k) * 10
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:10, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = aa(c(i:15), 3)
output
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
if(!require("devtools")) install.packages("devtools")
if(!require("servr")) install.packages("servr")
if(!require("knitr")) install.packages("knitr")
library(servr)
#devtools::install_github("choux130/servr_2")
library(devtools)
#ls("package:servr")
#jekyll
#build_jekyll
#trace("jekyll",edit=TRUE)
#dev_mode()
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
aa = function(x, k){
library(zoo)
y = rollmean(x, k)
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = aa(c(i:30), 10)
output
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
aa = function(x, k){
library(zoo)
y = rollmean(x, k)
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = aa(c(i:10), 5)
output
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
if(!require("devtools")) install.packages("devtools")
if(!require("servr")) install.packages("servr")
if(!require("knitr")) install.packages("knitr")
library(servr)
#devtools::install_github("choux130/servr_2")
library(devtools)
#ls("package:servr")
#jekyll
#build_jekyll
#trace("jekyll",edit=TRUE)
#dev_mode()
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
SelfFunc = function(values, names){
for (i in 1:length(values)){
n = names[i]
assign(n, values[i])
}
}
SelfFunc(c(1:3), c("a","b","c"))
a
assign(a, 3)
assign(3, a)
?assign
assign("a", 3)
a
SelfFunc = function(values, names){
for (i in 1:length(values)){
n = names[i]
assign(n, values[i])
}
d = data.frame(names)
return(d)
}
SelfFunc(c(1:3), c("a","b","c"))
CreateDataFrame = function(value, colname){
d = data.frame(colname = value)
return(d)
}
CreateDataFrame(c(1:10), "abc")
CreateDataFrame = function(value, colname){
d = data.frame(value)
names(d) = colname
return(d)
}
return(d)
CreateDataFrame(c(1:10), "abc")
.packages = c("foreach","doParallel", "doSNOW", "zoo")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst], repos = "http://cran.us.r-project.org")
lapply(.packages, require, character.only=TRUE)
capture.output(lapply(.packages, require, character.only=TRUE))
a = capture.output(lapply(.packages, require, character.only=TRUE))
tmp = capture.output(lapply(.packages, require, character.only=TRUE))
.packages = c("foreach","doParallel", "doSNOW", "zoo")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst], repos = "http://cran.us.r-project.org")
tmp = capture.output(lapply(.packages, require, character.only=TRUE))
#### Define the function ####
CreateDataFrame = function(value, colname){
d = data.frame(value)
names(d) = colname
return(d)
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = CreateDataFrame(c(1:i), colname)
output
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
output = CreateDataFrame(c(1:i), "abc")
output
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
i =
1
out = CreateDataFrame(c(1:i), "abc")
out
closeAllConnections()
lapply(.packages, require, character.only=TRUE)
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
out = CreateDataFrame(c(1:i), "abc")
out
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
out = CreateDataFrame(c(1:i), "abc")
out
out
out = CreateDataFrame(c(1:i), "abc")
out
i =2
out = CreateDataFrame(c(1:i), "abc")
out
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
out = CreateDataFrame(c(1:i), "abc")
out
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
output_par[[1]]
output_par[[2]]
output_par[[3]]
output_par
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass', .combine = rbind) %dopar%
{
out = CreateDataFrame(c(1:i), "abc")
out
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
output_par
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass', .combine = cbind) %dopar%
{
out = CreateDataFrame(c(1:i), "abc")
out
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
.packages = c("foreach","doParallel", "doSNOW")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst], repos = "http://cran.us.r-project.org")
lapply(.packages, require, character.only=TRUE)
#### Define the function ####
CreateDataFrame = function(value, colname){
d = data.frame(value)
names(d) = colname
return(d)
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
out = CreateDataFrame(c(1:i), "abc")
out
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
output_par[[1]]
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
out = CreateDataFrame(c(1:i), "abc")
# out
a =2
a
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
out = data.frame(CreateDataFrame(c(1:i), "abc"))
out
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
?rep
CreateDataFrame = function(value, times){
d = rep(value, times = times)
return(d)
}
#### Run Parallelly ####
num_core = detectCores() - 2 # detect # of CPU cores
cl = makeCluster(num_core, outfile = "") # define the clusters
registerDoSNOW(cl)
# print out the progress for every iteration
progress <- function(n) cat(sprintf("task %d is complete\n", n))
opts <- list(progress=progress)
start.time = proc.time()
# the default .combine = list
output_par =
foreach(i = 1:5, .options.snow = opts, .errorhandling = 'pass') %dopar%
{
out = CreateDataFrame(c(1:i), 3)
out
}
stopCluster(cl) # stop the cluster in the end
(end.time = proc.time() - start.time)
output_par
if(!require("devtools")) install.packages("devtools")
if(!require("servr")) install.packages("servr")
if(!require("knitr")) install.packages("knitr")
library(servr)
#devtools::install_github("choux130/servr_2")
library(devtools)
#ls("package:servr")
#jekyll
#build_jekyll
#trace("jekyll",edit=TRUE)
#dev_mode()
servr::jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
