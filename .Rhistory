eval(y)
class(eval(y))
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t=ddply(d, ~ eval(y), summarise,
Mean=mean(x),
Sd=sd(x), min=min(x),
Q1=quantile(x,0.25),
Median=quantile(x,0.5),
Q3=quantile(x,0.75), Max=max(x))
print(t)
}
t_xnum_ycat(data, x="satisf_level", y='left_or_not')
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t=ddply(d, ~ eval(y), summarise,
Mean=mean(eval(x)),
Sd=sd(x), min=min(x),
Q1=quantile(x,0.25),
Median=quantile(x,0.5),
Q3=quantile(x,0.75), Max=max(x))
print(t)
}
t_xnum_ycat(data, x="satisf_level", y='left_or_not')
x="satisf_level"
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t=ddply(d, ~ eval(y), summarise,
Mean=mean(eval(x)),
Sd=sd(x), min=min(x),
Q1=quantile(x,0.25),
Median=quantile(x,0.5),
Q3=quantile(x,0.75), Max=max(x))
print(t)
}
t_xnum_ycat(data, x="satisf_level", y='left_or_not')
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t=ddply(d, ~ eval(y), summarise)
print(t)
}
t_xnum_ycat(data, x="satisf_level", y='left_or_not')
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t=ddply(d, ~ eval(y), summarise,
Mean=mean(evalString(x)),
Sd=sd(x), min=min(x),
Q1=quantile(x,0.25),
Median=quantile(x,0.5),
Q3=quantile(x,0.75), Max=max(x))
print(t)
}
t_xnum_ycat(data, x="satisf_level", y='left_or_not')
get(x)
eval(x)
string(x)
paste(x)
pasrse(x)
parse(x)
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t=ddply(d, ~ eval(y), summarise,
Mean=mean(d[[eval(x)]),
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t=ddply(d, ~ eval(y), summarise,
Mean=mean(d[[eval(x)]]),
Sd=sd(x), min=min(x),
Q1=quantile(x,0.25),
Median=quantile(x,0.5),
Q3=quantile(x,0.75), Max=max(x))
print(t)
}
t_xnum_ycat(data, x="satisf_level", y='left_or_not')
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t=ddply(data, ~ eval(y), summarise,
Mean=mean(data[[eval(x)]]),
Sd=sd(x), min=min(x),
Q1=quantile(x,0.25),
Median=quantile(x,0.5),
Q3=quantile(x,0.75), Max=max(x))
print(t)
}
t_xnum_ycat(data, x="satisf_level", y='left_or_not')
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
xx=d[,x]
t=ddply(data, ~ eval(y), summarise,
Mean=mean(x),
Sd=sd(x), min=min(x),
Q1=quantile(x,0.25),
Median=quantile(x,0.5),
Q3=quantile(x,0.75), Max=max(x))
print(t)
}
t_xnum_ycat(data, x="satisf_level", y='left_or_not')
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
xx=d[,x]
t=ddply(data, ~ eval(y), summarise,
Mean=mean(xx),
Sd=sd(xx), min=min(xx),
Q1=quantile(xx,0.25),
Median=quantile(xx,0.5),
Q3=quantile(xx,0.75), Max=max(xx))
print(t)
}
t_xnum_ycat(data, x="satisf_level", y='left_or_not')
d=data, x="satisf_level"
d=data
x="satisf_level"
d[[x]]
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
xx=d[[x]]
t=ddply(data, ~ eval(y), summarise,
Mean=mean(xx),
Sd=sd(xx), min=min(xx),
Q1=quantile(xx,0.25),
Median=quantile(xx,0.5),
Q3=quantile(xx,0.75), Max=max(xx))
print(t)
}
t_xnum_ycat(d=data, x="satisf_level", y='left_or_not')
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
xx=d[[x]]
t=ddply(data, ~ eval(y),
Mean=mean(xx),
Sd=sd(xx), min=min(xx),
Q1=quantile(xx,0.25),
Median=quantile(xx,0.5),
Q3=quantile(xx,0.75), Max=max(xx))
print(t)
}
t_xnum_ycat(d=data, x="satisf_level", y='left_or_not')
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
# xx=d[[x]]
# t=ddply(data, ~eval(y), summarise,
#           Mean=mean(xx),
#           Sd=sd(xx), min=min(xx),
#           Q1=quantile(xx,0.25),
#           Median=quantile(xx,0.5),
#           Q3=quantile(xx,0.75), Max=max(xx))
t <- ddply(d, y, .fun = function(xx){
c(mean = mean(xx[,x],na.rm=TRUE),
max = max(xx[,x],na.rm=TRUE) ) })
return(t)
}
t_xnum_ycat(d=data, x="satisf_level", y='left_or_not')
t_xnum_ycat=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t <- ddply(d, y, .fun = function(dd){
c(Mean = mean(dd[,x],na.rm=TRUE),
Sd = sd(dd[,x],na.rm=TRUE),
min=min(dd[,x]),
Q1=quantile(dd[,x],0.25),
Median=quantile(dd[,x],0.5),
Q3=quantile(dd[,x],0.75),
Max=max(dd[,x])) })
return(t)
}
t_xnum_ycat(d=data, x="satisf_level", y='left_or_not')
hist_bygroup=function(d,xx,yy,name){
if (!require("ggplot2")) install.packages("ggplot2")
ggplot(d, aes_string(x=xx, color=yy, fill=yy))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)+
ggtitle(name)
}
box_bygroup=function(d,xx,yy,name){
if (!require("ggplot2")) install.packages("ggplot2")
ggplot(d, aes_string(x=yy, y=xx, fill=yy)) +
geom_boxplot()+
ggtitle(name)
}
t_bygroup(d=data, x="satisf_level", y='left_or_not')
t_bygroup=function(d, x, y){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t <- ddply(d, y, .fun = function(dd){
c(Mean = mean(dd[,x],na.rm=TRUE),
Sd = sd(dd[,x],na.rm=TRUE),
min=min(dd[,x]),
Q1=quantile(dd[,x],0.25),
Median=quantile(dd[,x],0.5),
Q3=quantile(dd[,x],0.75),
Max=max(dd[,x])) })
return(t)
}
t_bygroup(d=data, x="satisf_level", y='left_or_not')
# Histogram
hist_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Histogram for satisf_level")
# Box plot
box_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Boxplot for satisf_level")
par(mfrow(1,2))
?par
par(mfrow(c(1,2))
par(mfrow(c(1,2)))
par(mfrow(c(1,2)))
par(mfrow=c(1,2)) # Arrangement for multiplot
# Histogram
hist_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Histogram for satisf_level")
# Box plot
box_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Boxplot for satisf_level")
t_bygroup(d=data, x="satisf_level", y='left_or_not')
if (!require("Rmisc")) install.packages("Rmisc") # Arrangement for multiple ggplots
# Histogram
hist_sat=hist_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Histogram for satisf_level")
# Box plot
box_sat=box_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Boxplot for satisf_level")
multiplot(plotlist = list(hist_sat,box_sat), cols = 2)
names(dat)
names(data)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
xtabs(data$work_accid,data$left_or_not)
xtab(data$work_accid,data$left_or_not)
table(data$work_accid,data$left_or_not)
?xtab
?xtabs
xtabs(~work_accid+left_or_not, data)
names(data())
names(data
)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
xtabs?
)
?xtabs
CrossTable
?CrossTable
if (!require("gmodels")) install.packages("gmodels")
?CrossTable
install.packages("gmodels")
?CrossTable
?gmodels
?CrossTable
??CrossTable
CrossTable(data$work_accid,data$left_or_not)
gmodels::CrossTable(data$work_accid,data$left_or_not)
xtabs(~work_accid+left_or_not, data)
prop.table(xtabs(~promo_last_5yrs+left_or_not, data))
xtabs(~promo_last_5yrs+left_or_not, data)
t1=xtabs(~promo_last_5yrs+left_or_not, data)
per1=sum(t1)
per1=sum(t1)
per1
dim(data)
apply(t1,1,sum)
t1
apply(t1,1,sum)
per_col=apply(t1,1,sum)/sum(t1)
per_row=apply(t1,2,sum)/sum(t1)
t1=xtabs(~promo_last_5yrs+left_or_not, data)
per_col=apply(t1,1,sum)/sum(t1)
per_row=apply(t1,2,sum)/sum(t1)
t1=cbind(t1,per_col)
t1=rbind(t1,c(per_row,sum(t1)))
t1
?xtab
?xtabs
?crosstab
crosstab
?crosstab
margin.table(t1,1)
t1=xtabs(~promo_last_5yrs+left_or_not, data)
margin.table(t1,1)
t1=cbind(t1,margin.table(t1,1))
t1
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=cbind(t1,margin.table(t_prom,1))
t_prom=rbind(t_prom,margin(table(t_prom,2)))
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=cbind(t1,margin.table(t_prom,1))
t_prom
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=cbind(t_prom,margin.table(t_prom,1))
t_prom=rbind(t_prom,margin(table(t_prom,2)))
t_prom
margin(table(t_prom,2))
margin.table(t_prom,2)
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=cbind(t_prom,margin.table(t_prom,1))
t_prom=rbind(t_prom,margin.table(t_prom,2))
t_prom
levels(data$left_or_not)
xtabs(~department+left_or_not, data)
class(xtabs(~department+left_or_not, data))
names(xtabs(~department+left_or_not, data))
colnames(xtabs(~department+left_or_not, data))
names(dim(t_prom))=c("t1","t2")
t_prom
names(dimnames(t_prom))=c("t1","t2")
dimnames(t_prom)=c("t1","t2")
dimnames(t_prom)
dimnames(t_prom)=list(c("t1","t2"))
=c("t1","t2")
names(dimnames(t_prom))
names(dimnames(t_prom))=c("t1","t2")
?dimnames
dimnames(t_prom)=list(c("a","b","c"),c("1","2","3")
dimnames(t_prom)=list(c("a","b","c"),c("1","2","3"))
dimnames(t_prom)=list(c("a","b","c"),c("1","2","3"))
t_prom
dimnames(t_prom)=list(A=c("a","b","c"),B=c("1","2","3"))
t_prom
two_table=function(d, x, y){
t=xtabs(~x+y, d)
t=cbind(t, margin.table(t,1))
t=rbind(t, margin.table(t,2))
dimnames(t=list(x=c(levels(d[[x]]),"Total"),
y=c(levels(d[[y]]),"Total")))
return(t)
}
two_table(data, x="promo_last_5yrs", y="left_or_not")
d=data
x="promo_last_5yrs"
y="left_or_not"
t=xtabs(~x+y, d)
t=cbind(t, margin.table(t,1))
t=rbind(t, margin.table(t,2))
dimnames(t=list(x=c(levels(d[[x]]),"Total"),
y=c(levels(d[[y]]),"Total"))
)
dimnames(t)=list(x=c(levels(d[[x]]),"Total"),
y=c(levels(d[[y]]),"Total"))
dimnames(t)
c(levels(d[[x]]),"Total")
x=c(levels(d[[x]]),"Total"
)
x
quote(x)
x="promo_last_5yrs"
toString(x)
x="promo_last_5yrs"
y="left_or_not"
list(toString(x)=c(levels(d[[x]]),"Total"),
toString(x)=c(levels(d[[x]]),"Total")
list(promo_last_5yrs=c(levels(d[[x]]),"Total"),
left_or_not=c(levels(d[[y]]),"Total"))
dimnames(t)=list(c(levels(d[[x]]),"Total"),
c(levels(d[[y]]),"Total"))
x="promo_last_5yrs"
y="left_or_not"
t=xtabs(~x+y, d)
t=cbind(t, margin.table(t,1))
t=rbind(t, margin.table(t,2))
dimnames(t)=list(c(levels(d[[x]]),"Total"),
c(levels(d[[y]]),"Total"))
t
d=data
x="promo_last_5yrs"
y="left_or_not"
t=xtabs(~x+y, d)
t
t=xtabs(~x+y, d)
t
xtabs(~x+y, d)
data()
data
x="promo_last_5yrs"
y="left_or_not"
t=xtabs(~x+y, d)
t
x
y
xx=d[[x]]
yy=d[[y]]
t=xtabs(xx~yy)
xx=dfram[,x]
xx=dframe[,x]
names(data
)
lapply(data[,c("work_accid","promo_last_5yrs","department")],
function(x) xtabs(~ x + data$left_or_not))
list_xtab=
lapply(data[,c("work_accid","promo_last_5yrs","department")],
function(x) xtabs(~ x + data$left_or_not))
list_xtab_sum=lapply(list_xtab,addmargins)
list_xtab_sum
list_xtab_prop=lapply(list_xtabs_sum, prop.table)
list_xtab_prop=lapply(list_xtab_sum, prop.table)
list_xtab_prop
list_xtab_prop=lapply(list_xtab, prop.table)
list_xtab_prop
list_prop=lapply(list_xtab, prop.table)
list_prop_sum=lapply(list_xtab, addmargins)
list_prop_sum
list_xtab=
lapply(data[,c("work_accid","promo_last_5yrs","department")],
function(x) xtabs(~ x + data$left_or_not))
list_xtab_sum=lapply(list_xtab,addmargins)
# Proportion
list_prop=lapply(list_xtab, prop.table)
list_prop_sum=lapply(list_xtab, addmargins)
list_prop_sum
list_prop
list_prop_sum=lapply(list_prop, addmargins)
list_prop_sum
list_xtab_sum
list_prop=round(lapply(list_xtab, prop.table),3)
?round
list_prop=lapply(list_prop,round,3)
list_prop
list_prop_sum=lapply(list_prop, addmargins)
list_prop_sum
list_xtab=
lapply(data[,c("work_accid","promo_last_5yrs","department")],
function(x) xtabs(~ x + data$left_or_not))
(list_xtab_sum=lapply(list_xtab,addmargins))
# Proportion
list_prop=lapply(list_xtab, prop.table)
list_prop=lapply(list_prop,round,3)
(list_prop_sum=lapply(list_prop, addmargins))
dat=read.csv("/Users/chou/Google Drive/Kaggle/HR/HR_analytics.csv", header=TRUE)
data=dat # keep raw data pure
# Rename the variables
names(data)=c("satisf_level","last_eval","num_proj",
"ave_mon_hrs","time_spend","work_accid",
"left_or_not","promo_last_5yrs","department",
"salary")
# Reorder the data
data=data[,c(1:6,8:10,7)]
# Correct variables' attributes
data$work_accid=as.factor(data$work_accid)
data$promo_last_5yrs=as.factor(data$promo_last_5yrs)
data$left_or_not=as.factor(data$left_or_not)
str(data)
# Finding NA
which(is.na(data), arr.ind=TRUE) #the indices of NA values
if (!require("plyr")) install.packages("plyr")
if (!require("gmodels")) install.packages("gmodels")
names(data)
CrossTable(x = promo_last_5yrs, y = leave_or_not,
digits=3, max.width = 5, prop.r=TRUE,
prop.chisq=FALSE, prop.c=FALSE,format=c("SPSS"))
CrossTable
?CrossTable
CrossTable(x = data$promo_last_5yrs, y = data$leave_or_not,
digits=3, max.width = 5, prop.r=TRUE,
prop.chisq=FALSE, prop.c=FALSE,format=c("SPSS"))
data$promo_last_5yrs
length(data$promo_last_5yrs)
length(data$leave_or_not)
names(data)
CrossTable(x = data$promo_last_5yrs, y = data$left_or_not,
digits=3, max.width = 5, prop.r=TRUE,
prop.chisq=FALSE, prop.c=FALSE,format=c("SPSS"))
CrossTable(x = data$promo_last_5yrs, y = data$left_or_not,
digits=3, max.width = 5, prop.r=TRUE,
prop.chisq=FALSE, prop.c=TRUE,format=c("SPSS"))
