#library(knitr)
#table=kable(t, caption= paste("Summary Table for", xx, "by", yy ))
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
library(gridExtra)
#plot=multiplot(plotlist = list(hist,box), cols = 2)
plot=grid.arrange(hist,box)
grid.arrange(grid.table(t),plot)
}
all(data, xx="satisf_level", yy="left_or_not",2)
all=function(d, xx, yy, round){
t=t_bygroup(d=d, xx, yy, round)
library(gridExtra)
#library(knitr)
#table=kable(t, caption= paste("Summary Table for", xx, "by", yy ))
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
library(gridExtra)
#plot=multiplot(plotlist = list(hist,box), cols = 2)
plot=grid.arrange(hist,box)
plot
#grid.arrange(grid.table(t),plot)
}
all(data, xx="satisf_level", yy="left_or_not",2)
?grid.arrange
all=function(d, xx, yy, round){
t=t_bygroup(d=d, xx, yy, round)
library(gridExtra)
#library(knitr)
#table=kable(t, caption= paste("Summary Table for", xx, "by", yy ))
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
library(gridExtra)
#plot=multiplot(plotlist = list(hist,box), cols = 2)
plot=grid.arrange(hist,box, nrow=1)
plot
#grid.arrange(grid.table(t),plot)
}
all(data, xx="satisf_level", yy="left_or_not",2)
all=function(d, xx, yy, round){
t=t_bygroup(d=d, xx, yy, round)
library(gridExtra)
#library(knitr)
#table=kable(t, caption= paste("Summary Table for", xx, "by", yy ))
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
library(gridExtra)
#plot=multiplot(plotlist = list(hist,box), cols = 2)
plot=grid.arrange(hist,box, nrow=1)
plot
grid.arrange(plot,grid.table(t))
}
all(data, xx="satisf_level", yy="left_or_not",2)
?grid.table
t=t_bygroup(data, "last_eval", "left_or_not", round=2)
t
data.frame(t)
all=function(d, xx, yy, round){
t=t_bygroup(d=d, xx, yy, round)
library(gridExtra)
#library(knitr)
#table=kable(t, caption= paste("Summary Table for", xx, "by", yy ))
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
library(gridExtra)
#plot=multiplot(plotlist = list(hist,box), cols = 2)
plot=grid.arrange(hist,box, nrow=1)
#plot
grid.arrange(plot,tableGrob(data.frame(t)))
}
all(data, xx="satisf_level", yy="left_or_not",2)
all=function(d, xx, yy, round){
t=t_bygroup(d=d, xx, yy, round)
library(gridExtra)
#library(knitr)
#table=kable(t, caption= paste("Summary Table for", xx, "by", yy ))
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
library(gridExtra)
#plot=multiplot(plotlist = list(hist,box), cols = 2)
plot=grid.arrange(hist,box, nrow=1)
plot
tableGrob(data.frame(t))
}
all(data, xx="satisf_level", yy="left_or_not",2)
tableGrob(data.frame(t))
all=function(d, xx, yy, round){
t=t_bygroup(d=d, xx, yy, round)
library(gridExtra)
#library(knitr)
#table=kable(t, caption= paste("Summary Table for", xx, "by", yy ))
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
library(gridExtra)
grid.arrange(hist,box, nrow=1)
grid.arrange(tableGrob(data.frame(t)))
}
all(data, xx="satisf_level", yy="left_or_not",2)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
?tableGrob
names(data)
vars_cat=c("work_accid", "promo_last_5yrs", "department", "salary")
vars_cat=c("work_accid", "promo_last_5yrs", "department", "salary")
pair_var
vars_cat=c("work_accid", "promo_last_5yrs", "department", "salary")
pair_var=combn(vars_cat,2)
pair_var
pair_var=t(combn(vars_cat,2))
pair_var
?CrossTable
if (!require("gmodels")) install.packages("gmodels")
?CrossTable
paste(d,xx)
paste("d","xx")
vars_cat=c("work_accid", "promo_last_5yrs", "department", "salary")
tab_bygroup=function(d, xx, yy, digits, prop.r, prop.c, prop.chisq){
if (!require("gmodels")) install.packages("gmodels")
CrossTable(x=d$xx, y=d$yy, digitd=digits, prop.r=prop.r,
prop.c=prop.c, prop.chisq=prop.chisq)
}
tab_bygroup(d=data, xx=work_accid, yy=left_or_not,
digits=3, prop.r=TRUE, prop.c=TRUE, prop.chisq=FALSE)
tab_bygroup=function(d, xx, yy, digits, prop.r, prop.c, prop.chisq){
if (!require("gmodels")) install.packages("gmodels")
CrossTable(x=d$xx, y=d$yy, digitd=digits, prop.r=prop.r,
prop.c=prop.c, prop.chisq=prop.chisq, format=c("SPSS"))
}
tab_bygroup(d=data, xx=work_accid, yy=left_or_not,
digits=3, prop.r=TRUE, prop.c=TRUE, prop.chisq=FALSE)
CrossTable(x=data$work_accid, y=data$left_or_not, digitd=3, prop.r=T,
prop.c=T, prop.chisq=F, format=c("SPSS"))
tab_bygroup=function(d, xx, yy, digits, prop.r, prop.c, prop.chisq){
if (!require("gmodels")) install.packages("gmodels")
CrossTable(x=d[[xx]], y=d[[yy]], digitd=digits, prop.r=prop.r,
prop.c=prop.c, prop.chisq=prop.chisq, format=c("SPSS"))
}
tab_bygroup(d=data, xx=work_accid, yy=left_or_not,
digits=3, prop.r=TRUE, prop.c=TRUE, prop.chisq=FALSE)
tab_bygroup=function(d, xx, yy, digits, prop.r, prop.c, prop.chisq){
if (!require("gmodels")) install.packages("gmodels")
CrossTable(x=d[[xx]], y=d[[yy]], digitd=digits, prop.r=prop.r,
prop.c=prop.c, prop.chisq=prop.chisq, format=c("SPSS"))
}
tab_bygroup(d=data, xx="work_accid", yy="left_or_not",
digits=3, prop.r=TRUE, prop.c=TRUE, prop.chisq=FALSE)
invisible(lapply(vars_cat, tab_bygroup, d=data, yy="left_or_not",
digits=3, prop.r=TRUE, prop.c=TRUE, prop.chisq=FALSE))
tab_bygroup=function(d, xx, yy, digits, prop.r, prop.c, prop.chisq){
if (!require("gmodels")) install.packages("gmodels")
CrossTable(x=d[[xx]], y=d[[yy]], digitd=digits, prop.r=prop.r,
prop.c=prop.c, prop.chisq=prop.chisq, format=c("SPSS"),
dnn=c(xx,yy))
}
tab_bygroup(d=data, xx="work_accid", yy="left_or_not",
digits=3, prop.r=TRUE, prop.c=TRUE, prop.chisq=FALSE)
invisible(lapply(vars_cat, tab_bygroup, d=data, yy="left_or_not",
digits=3, prop.r=TRUE, prop.c=TRUE, prop.chisq=FALSE))
invisible(lapply(vars_num, all, d=data, yy=y, round=2))
vars_num=c("satisf_level", "last_eval", "num_proj", "ave_mon_hrs", "time_spend")
y='left_or_not'
invisible(lapply(vars_num, all, d=data, yy=y, round=2))
dat=read.csv("https://choux130.github.io/myblog/data/HR_analytics.csv",
header=TRUE)
data=dat # keep raw data pure
names(data)=c("satisf_level","last_eval","num_proj",
"ave_mon_hrs","time_spend","work_accid",
"left_or_not","promo_last_5yrs","department",
"salary")
##########################
#### Reorder the data ####
##########################
data=data[,c(1:6,8:10,7)]
data$work_accid=as.factor(data$work_accid)
data$promo_last_5yrs=as.factor(data$promo_last_5yrs)
data$left_or_not=as.factor(data$left_or_not)
str(data)
which(is.na(data), arr.ind=TRUE) #the indices of NA values
t_bygroup=function(d, xx, yy, round){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t <- ddply(d, yy, .fun = function(dd){
c(Mean = round(mean(dd[,xx],na.rm=TRUE),round),
Sd = round(sd(dd[,xx],na.rm=TRUE),round),
min=round(min(dd[,xx]),round),
Q1=round(quantile(dd[,xx],0.25),round),
Q2=round(quantile(dd[,xx],0.5),round),
Q3=round(quantile(dd[,xx],0.75),round),
Max=round(max(dd[,xx]),round)) })
return(t)
}
hist_bygroup=function(d,xx,yy,name){
if (!require("ggplot2")) install.packages("ggplot2")
ggplot(d, aes_string(x=xx, color=yy, fill=yy))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)+
ggtitle(name)
}
box_bygroup=function(d,xx,yy,name){
if (!require("ggplot2")) install.packages("ggplot2")
ggplot(d, aes_string(x=yy, y=xx, fill=yy)) +
geom_boxplot()+
ggtitle(name)
}
all_bygroup=function(d, xx, yy, round){
#the summary table
t=t_bygroup(d=d, xx, yy, round)
#the histogram
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
#the boxplot
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
#the package for arrange plots
if (!require("gridExtra")) install.packages("gridExtra")
grid.arrange(hist,box, nrow=1)
grid.arrange(tableGrob(data.frame(t))) #make the output table become a plot
}
vars_num=c("satisf_level", "last_eval", "num_proj", "ave_mon_hrs", "time_spend")
y='left_or_not'
invisible(lapply(vars_num, all, d=data, yy=y, round=2))
vars_num=c("satisf_level", "last_eval", "num_proj", "ave_mon_hrs", "time_spend")
y='left_or_not'
invisible(sapply(vars_num, all, d=data, yy=y, round=2))
vars_num=c("satisf_level", "last_eval", "num_proj", "ave_mon_hrs", "time_spend")
y='left_or_not'
invisible(sapply(vars_num, all, d=data, yy=y, round=2))
sapply(vars_num, all, d=data, yy=y, round=2)
lapply(vars_num, all, d=data, yy=y, round=2)
all_bygroup(data,"satisf_level", "left_or_not", round)
all_bygroup(data,satisf_level, left_or_not, round)
all_bygroup(data,"satisf_level", "left_or_not", round=2)
lapply(vars_num, all, d=data, yy=y, round=2)
apply(vars_num, all, d=data, yy=y, round=2)
invinsible(lapply(vars_num, all_bygroup, d=data, yy=y, round=2))
invisible(lapply(vars_num, all_bygroup, d=data, yy=y, round=2))
data[,c("work_accid","promo_last_5yrs","left_or_not")]=
apply(data[,c("work_accid","promo_last_5yrs","left_or_not")], as.numeric)
data[,c("work_accid","promo_last_5yrs","left_or_not")]=
sapply(data[,c("work_accid","promo_last_5yrs","left_or_not")], as.numeric)
dat=read.csv("https://choux130.github.io/myblog/data/HR_analytics.csv",
header=TRUE)
data=dat
names(data)=c("satisf_level","last_eval","num_proj",
"ave_mon_hrs","time_spend","work_accid",
"left_or_not","promo_last_5yrs","department",
"salary")
data=data[,c(1:6,8:10,7)]
str(data)
data[,c("work_accid","promo_last_5yrs","left_or_not")]=
sapply(data[,c("work_accid","promo_last_5yrs","left_or_not")], as.numeric)
str(data)
?apply
?lapply
data[,c("work_accid","promo_last_5yrs","left_or_not")]=
lapply(data[,c("work_accid","promo_last_5yrs","left_or_not")], as.numeric)
str(data)
data[,c("work_accid","promo_last_5yrs","left_or_not")]=
sapply(data[,c("work_accid","promo_last_5yrs","left_or_not")], as.numeric)
str(data)
data[,c("work_accid","promo_last_5yrs","left_or_not")]=
as.factor(data[,c("work_accid","promo_last_5yrs","left_or_not")])
data[,c("work_accid","promo_last_5yrs","left_or_not")]=
lapply(data[,c("work_accid","promo_last_5yrs","left_or_not")],as.factor)
str(data)
tab_prop_sum
tt=t(combn(c("work_accid","promo_last_5yrs",
"department","salary"),2))
tab=function(xx,yy,df){
formula <- as.formula(paste("~", xx, "+", yy))
xtabs(data=df, formula)
}
tab_count=mapply(tab, tt[,1], tt[,2],list(data))
tab_sum=lapply(tab_count,addmargins)
tab_prop=lapply(tab_count, prop.table)
tab_prop_sum=lapply(tab_prop, addmargins)
tab_prop_sum=lapply(tab_prop_sum, round, 3)
tab_prop_sum
data.frame(tab_prop_sum)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
tab_count
tab_count %>%
lapply(., prop.table) %>%
lapply(., addmargins) %>%
lapply(., round, 3) ->tab_prop_sum
if (!require("magrittr")) install.packages("magrittr")
tab_count %>%
lapply(., prop.table) %>%
lapply(., addmargins) %>%
lapply(., round, 3) ->tab_prop_sum
tab_prop_sum
?mapply
names(tab_count)
length(tab_count)
tab_count=mapply(tab, tt[,1], tt[,2],list(data))
names(tab_count) = c(1:length(tab_count))
tab_sum=lapply(tab_count,addmargins)
print(tab_sum)
print(tab_prop_sum)
tab_count %>%
lapply(., prop.table) %>%
lapply(., addmargins) %>%
lapply(., round, 3) ->tab_prop_sum
print(tab_prop_sum)
lapply(tab_prop_sum, kable)
?kable
class(tab_prop_sum)
?tableGrob
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
?lapply
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
cv2=function(data, prop1){
N = nrow(data)
n = ceiling(N*prop1)
ind = sample(N,n)
sep1= data[ind,]
sep2= data[-ind,]
list(dat_1=sep1, dat_2=sep2)
}
test=cv2(data,0.9)$dat_2 #1499   10
k=10
data$cv_group=sample(rep(1:k, length.out=nrow(data)),
nrow(data), replace=FALSE)
# the fold 1 validation set
first_val=data[data$cv_group=="1",]
# the fold 1 train set
first_train=data[data$cv_group!="1",]
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
dat=read.csv("https://choux130.github.io/myblog/data/HR_analytics.csv",
header=TRUE)
data=dat # keep raw data pure
names(data)=c("satisf_level","last_eval","num_proj",
"ave_mon_hrs","time_spend","work_accid",
"left_or_not","promo_last_5yrs","department",
"salary")
data=data[,c(1:6,8:10,7)]
data[,c("work_accid","promo_last_5yrs","left_or_not")]=
lapply(data[,c("work_accid","promo_last_5yrs","left_or_not")],as.factor)
str(data)
t_bygroup=function(d, xx, yy, round){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t <- ddply(d, yy, .fun = function(dd){
c(Mean = round(mean(dd[,xx],na.rm=TRUE),round),
Sd = round(sd(dd[,xx],na.rm=TRUE),round),
min=round(min(dd[,xx]),round),
Q1=round(quantile(dd[,xx],0.25),round),
Q2=round(quantile(dd[,xx],0.5),round),
Q3=round(quantile(dd[,xx],0.75),round),
Max=round(max(dd[,xx]),round)) })
return(t)
}
hist_bygroup=function(d,xx,yy,name){
if (!require("ggplot2")) install.packages("ggplot2")
ggplot(d, aes_string(x=xx, color=yy, fill=yy))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)+
ggtitle(name)
}
box_bygroup=function(d,xx,yy,name){
if (!require("ggplot2")) install.packages("ggplot2")
ggplot(d, aes_string(x=yy, y=xx, fill=yy)) +
geom_boxplot()+
ggtitle(name)
}
all_bygroup=function(d, xx, yy, round){
#the summary table
t=t_bygroup(d=d, xx, yy, round)
#the histogram
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
#the boxplot
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
#the package for arrange plots
if (!require("gridExtra")) install.packages("gridExtra")
grid.arrange(hist,box, nrow=1)
grid.arrange(tableGrob(data.frame(t))) #make the output table become a plot
}
vars_num=c("satisf_level", "last_eval", "num_proj", "ave_mon_hrs", "time_spend")
y="left_or_not"
#the invisible() here is to hide the unwanted output from lapply
invisible(lapply(vars_num, all_bygroup, d=data, yy=y, round=2))
all_bygroup(data, xx="satisf_level", yy="left_or_not", round=2)
tab_bygroup=function(d, xx, yy, digits, prop.r, prop.c, prop.chisq){
if (!require("gmodels")) install.packages("gmodels")
CrossTable(x=d[[xx]], y=d[[yy]], digitd=digits, prop.r=prop.r,
prop.c=prop.c, prop.chisq=prop.chisq, format=c("SPSS"),
dnn=c(xx,yy))
}
vars_cat=c("work_accid", "promo_last_5yrs", "department", "salary")
tab_bygroup(data, xx="work_accid", yy="left_or_not",
digits=3, prop.r=T, prop.c=T, prop.chisq=T)
tab=function(xx,yy,df){
formula <- as.formula(paste("~", xx, "+", yy))
xtabs(data=df, formula)
}
# list all the combination of two categorical variables
tt=t(combn(c("work_accid","promo_last_5yrs",
"department","salary"),2))
# apply the function to all the combinations
tab_count=mapply(tab, tt[,1], tt[,2], list(data))
names(tab_count) = c(1:length(tab_count))
# sum of marginals
tab_sum=lapply(tab_count,addmargins)
print(tab_sum)
tab_sum[[1]]
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
