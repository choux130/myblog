t_bygroup(d=data, x="satisf_level", y='left_or_not')
# Histogram
hist_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Histogram for satisf_level")
# Box plot
box_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Boxplot for satisf_level")
par(mfrow(1,2))
?par
par(mfrow(c(1,2))
par(mfrow(c(1,2)))
par(mfrow(c(1,2)))
par(mfrow=c(1,2)) # Arrangement for multiplot
# Histogram
hist_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Histogram for satisf_level")
# Box plot
box_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Boxplot for satisf_level")
t_bygroup(d=data, x="satisf_level", y='left_or_not')
if (!require("Rmisc")) install.packages("Rmisc") # Arrangement for multiple ggplots
# Histogram
hist_sat=hist_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Histogram for satisf_level")
# Box plot
box_sat=box_bygroup(d=data, xx="satisf_level", yy="left_or_not",
"Boxplot for satisf_level")
multiplot(plotlist = list(hist_sat,box_sat), cols = 2)
names(dat)
names(data)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
xtabs(data$work_accid,data$left_or_not)
xtab(data$work_accid,data$left_or_not)
table(data$work_accid,data$left_or_not)
?xtab
?xtabs
xtabs(~work_accid+left_or_not, data)
names(data())
names(data
)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
xtabs?
)
?xtabs
CrossTable
?CrossTable
if (!require("gmodels")) install.packages("gmodels")
?CrossTable
install.packages("gmodels")
?CrossTable
?gmodels
?CrossTable
??CrossTable
CrossTable(data$work_accid,data$left_or_not)
gmodels::CrossTable(data$work_accid,data$left_or_not)
xtabs(~work_accid+left_or_not, data)
prop.table(xtabs(~promo_last_5yrs+left_or_not, data))
xtabs(~promo_last_5yrs+left_or_not, data)
t1=xtabs(~promo_last_5yrs+left_or_not, data)
per1=sum(t1)
per1=sum(t1)
per1
dim(data)
apply(t1,1,sum)
t1
apply(t1,1,sum)
per_col=apply(t1,1,sum)/sum(t1)
per_row=apply(t1,2,sum)/sum(t1)
t1=xtabs(~promo_last_5yrs+left_or_not, data)
per_col=apply(t1,1,sum)/sum(t1)
per_row=apply(t1,2,sum)/sum(t1)
t1=cbind(t1,per_col)
t1=rbind(t1,c(per_row,sum(t1)))
t1
?xtab
?xtabs
?crosstab
crosstab
?crosstab
margin.table(t1,1)
t1=xtabs(~promo_last_5yrs+left_or_not, data)
margin.table(t1,1)
t1=cbind(t1,margin.table(t1,1))
t1
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=cbind(t1,margin.table(t_prom,1))
t_prom=rbind(t_prom,margin(table(t_prom,2)))
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=cbind(t1,margin.table(t_prom,1))
t_prom
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=cbind(t_prom,margin.table(t_prom,1))
t_prom=rbind(t_prom,margin(table(t_prom,2)))
t_prom
margin(table(t_prom,2))
margin.table(t_prom,2)
t_prom=xtabs(~promo_last_5yrs+left_or_not, data)
t_prom=cbind(t_prom,margin.table(t_prom,1))
t_prom=rbind(t_prom,margin.table(t_prom,2))
t_prom
levels(data$left_or_not)
xtabs(~department+left_or_not, data)
class(xtabs(~department+left_or_not, data))
names(xtabs(~department+left_or_not, data))
colnames(xtabs(~department+left_or_not, data))
names(dim(t_prom))=c("t1","t2")
t_prom
names(dimnames(t_prom))=c("t1","t2")
dimnames(t_prom)=c("t1","t2")
dimnames(t_prom)
dimnames(t_prom)=list(c("t1","t2"))
=c("t1","t2")
names(dimnames(t_prom))
names(dimnames(t_prom))=c("t1","t2")
?dimnames
dimnames(t_prom)=list(c("a","b","c"),c("1","2","3")
dimnames(t_prom)=list(c("a","b","c"),c("1","2","3"))
dimnames(t_prom)=list(c("a","b","c"),c("1","2","3"))
t_prom
dimnames(t_prom)=list(A=c("a","b","c"),B=c("1","2","3"))
t_prom
two_table=function(d, x, y){
t=xtabs(~x+y, d)
t=cbind(t, margin.table(t,1))
t=rbind(t, margin.table(t,2))
dimnames(t=list(x=c(levels(d[[x]]),"Total"),
y=c(levels(d[[y]]),"Total")))
return(t)
}
two_table(data, x="promo_last_5yrs", y="left_or_not")
d=data
x="promo_last_5yrs"
y="left_or_not"
t=xtabs(~x+y, d)
t=cbind(t, margin.table(t,1))
t=rbind(t, margin.table(t,2))
dimnames(t=list(x=c(levels(d[[x]]),"Total"),
y=c(levels(d[[y]]),"Total"))
)
dimnames(t)=list(x=c(levels(d[[x]]),"Total"),
y=c(levels(d[[y]]),"Total"))
dimnames(t)
c(levels(d[[x]]),"Total")
x=c(levels(d[[x]]),"Total"
)
x
quote(x)
x="promo_last_5yrs"
toString(x)
x="promo_last_5yrs"
y="left_or_not"
list(toString(x)=c(levels(d[[x]]),"Total"),
toString(x)=c(levels(d[[x]]),"Total")
list(promo_last_5yrs=c(levels(d[[x]]),"Total"),
left_or_not=c(levels(d[[y]]),"Total"))
dimnames(t)=list(c(levels(d[[x]]),"Total"),
c(levels(d[[y]]),"Total"))
x="promo_last_5yrs"
y="left_or_not"
t=xtabs(~x+y, d)
t=cbind(t, margin.table(t,1))
t=rbind(t, margin.table(t,2))
dimnames(t)=list(c(levels(d[[x]]),"Total"),
c(levels(d[[y]]),"Total"))
t
d=data
x="promo_last_5yrs"
y="left_or_not"
t=xtabs(~x+y, d)
t
t=xtabs(~x+y, d)
t
xtabs(~x+y, d)
data()
data
x="promo_last_5yrs"
y="left_or_not"
t=xtabs(~x+y, d)
t
x
y
xx=d[[x]]
yy=d[[y]]
t=xtabs(xx~yy)
xx=dfram[,x]
xx=dframe[,x]
names(data
)
lapply(data[,c("work_accid","promo_last_5yrs","department")],
function(x) xtabs(~ x + data$left_or_not))
list_xtab=
lapply(data[,c("work_accid","promo_last_5yrs","department")],
function(x) xtabs(~ x + data$left_or_not))
list_xtab_sum=lapply(list_xtab,addmargins)
list_xtab_sum
list_xtab_prop=lapply(list_xtabs_sum, prop.table)
list_xtab_prop=lapply(list_xtab_sum, prop.table)
list_xtab_prop
list_xtab_prop=lapply(list_xtab, prop.table)
list_xtab_prop
list_prop=lapply(list_xtab, prop.table)
list_prop_sum=lapply(list_xtab, addmargins)
list_prop_sum
list_xtab=
lapply(data[,c("work_accid","promo_last_5yrs","department")],
function(x) xtabs(~ x + data$left_or_not))
list_xtab_sum=lapply(list_xtab,addmargins)
# Proportion
list_prop=lapply(list_xtab, prop.table)
list_prop_sum=lapply(list_xtab, addmargins)
list_prop_sum
list_prop
list_prop_sum=lapply(list_prop, addmargins)
list_prop_sum
list_xtab_sum
list_prop=round(lapply(list_xtab, prop.table),3)
?round
list_prop=lapply(list_prop,round,3)
list_prop
list_prop_sum=lapply(list_prop, addmargins)
list_prop_sum
list_xtab=
lapply(data[,c("work_accid","promo_last_5yrs","department")],
function(x) xtabs(~ x + data$left_or_not))
(list_xtab_sum=lapply(list_xtab,addmargins))
# Proportion
list_prop=lapply(list_xtab, prop.table)
list_prop=lapply(list_prop,round,3)
(list_prop_sum=lapply(list_prop, addmargins))
dat=read.csv("/Users/chou/Google Drive/Kaggle/HR/HR_analytics.csv", header=TRUE)
data=dat # keep raw data pure
# Rename the variables
names(data)=c("satisf_level","last_eval","num_proj",
"ave_mon_hrs","time_spend","work_accid",
"left_or_not","promo_last_5yrs","department",
"salary")
# Reorder the data
data=data[,c(1:6,8:10,7)]
# Correct variables' attributes
data$work_accid=as.factor(data$work_accid)
data$promo_last_5yrs=as.factor(data$promo_last_5yrs)
data$left_or_not=as.factor(data$left_or_not)
str(data)
# Finding NA
which(is.na(data), arr.ind=TRUE) #the indices of NA values
if (!require("plyr")) install.packages("plyr")
if (!require("gmodels")) install.packages("gmodels")
names(data)
CrossTable(x = promo_last_5yrs, y = leave_or_not,
digits=3, max.width = 5, prop.r=TRUE,
prop.chisq=FALSE, prop.c=FALSE,format=c("SPSS"))
CrossTable
?CrossTable
CrossTable(x = data$promo_last_5yrs, y = data$leave_or_not,
digits=3, max.width = 5, prop.r=TRUE,
prop.chisq=FALSE, prop.c=FALSE,format=c("SPSS"))
data$promo_last_5yrs
length(data$promo_last_5yrs)
length(data$leave_or_not)
names(data)
CrossTable(x = data$promo_last_5yrs, y = data$left_or_not,
digits=3, max.width = 5, prop.r=TRUE,
prop.chisq=FALSE, prop.c=FALSE,format=c("SPSS"))
CrossTable(x = data$promo_last_5yrs, y = data$left_or_not,
digits=3, max.width = 5, prop.r=TRUE,
prop.chisq=FALSE, prop.c=TRUE,format=c("SPSS"))
names(data)
if (!require("ggpairs")) install.packages("ggpairs")
ggpairs(data=data, diag=list(continuous="density"), columns=1:3,
colour="left_or_not",
axisLabels="show")
install.packages("ggpairs")
install.packages("GGally")
if (!require("GGally")) install.packages("GGally")
ggpairs(data=data, diag=list(continuous="density"), columns=1:3,
colour="left_or_not",
axisLabels="show")
?ggpairs
ggpairs(iris, colour='Species', alpha=0.4)
ggpairs(data=data, diag=list(continuous="density"), columns=1:3,
colour="left_or_not",
axisLabels="show")
ggpairs(data=data, colour="left_or_not")
class(data)
str(data)
ggpairs(data=data, mapping=ggplot2::aes(colour = left_or_not))
ggpairs(data=data, mapping=ggplot2::aes(colour = left_or_not),
columns = 1:4)
ggpairs(data=data, mapping=ggplot2::aes(colour = left_or_not),
columns = 5:9)
ggpairs(data=data, mapping=ggplot2::aes(colour = left_or_not),
columns = 1:4, alpha=.3)
ggpairs(data=data, columns = 1:4,
mapping=ggplot2::aes(colour = left_or_not,  alpha=.3))
ggpairs(data=data, columns = 5:9,
mapping=ggplot2::aes(colour = left_or_not,  alpha=.3))
ggpairs(data=data, columns = 1:5,
mapping=ggplot2::aes(colour = left_or_not,  alpha=.3))
?ggpairs
?putPlot
ggpairs(data=data, columns = 6:9, diag=list(continuous="density",   discrete="bar"),
mapping=ggplot2::aes(colour = left_or_not,  alpha=.3))
ggpairs(data=data, columns = 1:5,
mapping=ggplot2::aes(colour = left_or_not,  alpha=.3))
ggpairs(data=data, columns = 1:3,
mapping=ggplot2::aes(colour = left_or_not,  alpha=0.8))
ggpairs(data=data, columns = 1:3,
mapping=ggplot2::aes(colour = left_or_not))
ggpairs(data=data, columns = 1:3,
mapping=ggplot2::aes(colour = left_or_not,  alpha=0.8))
ggpairs(data=data, columns = 1:5,
mapping=ggplot2::aes(colour = left_or_not,  alpha=0.8))
ggpairs(data=data, columns = c(1,2,4,5,3),
mapping=ggplot2::aes(colour = left_or_not,  alpha=0.8))
ggpairs(data=data, columns = c(1,2,4,5,3,10),
mapping=ggplot2::aes(colour = left_or_not,  alpha=0.8))
ggpairs(data=data, columns = c(6:9,10,),
mapping=ggplot2::aes(colour = left_or_not,  alpha=.3))
ggpairs(data=data, columns = c(6:9,10),
mapping=ggplot2::aes(colour = left_or_not,  alpha=0.8))
a=ggpairs(data=data, columns = c(6:9,10),
mapping=ggplot2::aes(colour = left_or_not,  alpha=0.8))
a[5,3]
a[5,5]
a[1,4]
ggpairs(data=data, columns = c(1:10),
mapping=ggplot2::aes(colour = left_or_not,  alpha=0.9))
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
nrow(data)
test=data[sample(N,0.2*N),]
N=nrow(data)
test=data[sample(N,0.2*N),]
dim(test)
N
set.seed(12345)
test=data[sample(N,N*test.prop),]
test.prop=0.1
set.seed(12345)
test=data[sample(N,N*test.prop),]
?sample
rest=data[-test_ind,]
set.seed(12345)
test_ind=sample(N,N*test.prop)
test=data[test_ind,]
rest=data[-test_ind,]
dim(rest)
train_ind=sampl(nrow(rest),N*train.prop)
train_ind=sample(nrow(rest),N*train.prop)
train.prop=0.7
train_ind=sample(nrow(rest),N*train.prop)
dim(test)
dim(train)
train_ind=sample(nrow(rest),N*train.prop)
train=rest[train_ind,]
dim(train)
N=nrow(data)
test.prop=0.1
train.prop=0.7
N*test.prop
test.prop
N*test.prop
floor(N*test.prop)
?floor
N*train.prop
N=nrow(data)
train.prop=0.7
val.prop=0.2
N*train.prop
ceiling(N*train.prop)
N*val.prop
ceiling(N*val.prop)
n_test=N-n_train-n_val
n_train=ceiling(N*train.prop)
n_val=ceiling(N*val.prop)
n_test=N-n_train-n_val
N=nrow(data)
n_train_val=ceiling(N*(0.7+0.2))
ind_train_val=sample(N,n_train_val)
test=data[-ind_train_val,]
d_train_val=data[ind_train_val,]
dim(d_train_val)
dim(test)
nrow(data)
ceiling(N*(0.7+0.2))
dat.sep=function(data, prop1){
N = nrow(data)
n = ceiling(N*prop1)
ind = sample(N,n)
sep1= data[ind,]
sep2= data[-ind]
list(dat.sep_1=sep1, dat.sep_2=sep2)
}
dat.sep(data,0.7)
dim(dat.sep(data,0.7)$dat.sep_1)
dim(dat.sep(data,0.7)$dat.sep_2)
dat.sep=function(data, prop1){
N = nrow(data)
n = ceiling(N*prop1)
ind = sample(N,n)
sep1= data[ind,]
sep2= data[-ind,]
list(dat.sep_1=sep1, dat.sep_2=sep2)
}
dim(dat.sep(data,0.7)$dat.sep_2)
cv2=function(data, prop1){
N = nrow(data)
n = ceiling(N*prop1)
ind = sample(N,n)
sep1= data[ind,]
sep2= data[-ind,]
list(dat_1=sep1, dat_2=sep2)
}
dim(cv2(data,0.9)$dat_1)
dim(cv2(data,0.9)$dat_2)
N*0.9
cv2=function(data, prop1){
N = nrow(data)
n = ceiling(N*prop1)
ind = sample(N,n)
sep1= data[ind,]
sep2= data[-ind,]
list(dat_1=sep1, dat_2=sep2)
}
test=cv2(data,0.9)$dat_2
dim(test)
dd=cv2(data,0.9)$dat_1
dim(dd)
dd_k1_train=cv2(data, 0.7/0.9)$dat_1
dim(dd_k1_train)
dd_k1_train=cv2(dd, 0.7/0.9)$dat_1
dim(dd_k1_train)
cv2(dd, 0.7/0.9)$dat_2
dd_k1_val=cv2(dd, 0.7/0.9)$dat_2
dim(dd_k1_val)
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
dim(test)[1]
dim(test)[1]+dim(dd_k1_train)+dim(dd_k1_val)
rep(1:3, length.out = 10)
sample(1,10)
?sample
sample(rep(1:3, length.out=10),
10, replace=FALSE)
sample(rep(1:3, length.out=10),
10, replace=FALSE)
rep(1:3, length.out=10)
first_test=daa[data$cv_group=="1",]
k=10
data$cv_group=sample(rep(1:k, length.out=nrow(data)),
nrow(data), replace=FALSE)
first_test=data[data$cv_group=="1",]
first_test
dim(first_test)
first_train=data[-data$cv_group=="1",]
dim(first_train)
first_train=data[data$cv_group!="1",]
dim(first_train)
names(data)
str(data)
