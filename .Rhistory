output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
cv2=function(data, prop1){
N = nrow(data)
n = ceiling(N*prop1)
ind = sample(N,n)
sep1= data[ind,]
sep2= data[-ind,]
list(dat_1=sep1, dat_2=sep2)
}
test=cv2(data,0.9)$dat_2 #1499   10
k=10
data$cv_group=sample(rep(1:k, length.out=nrow(data)),
nrow(data), replace=FALSE)
# the fold 1 validation set
first_val=data[data$cv_group=="1",]
# the fold 1 train set
first_train=data[data$cv_group!="1",]
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
dat=read.csv("https://choux130.github.io/myblog/data/HR_analytics.csv",
header=TRUE)
data=dat # keep raw data pure
names(data)=c("satisf_level","last_eval","num_proj",
"ave_mon_hrs","time_spend","work_accid",
"left_or_not","promo_last_5yrs","department",
"salary")
data=data[,c(1:6,8:10,7)]
data[,c("work_accid","promo_last_5yrs","left_or_not")]=
lapply(data[,c("work_accid","promo_last_5yrs","left_or_not")],as.factor)
str(data)
t_bygroup=function(d, xx, yy, round){
# an elegant way to install a missing package
if (!require("plyr")) install.packages("plyr")
t <- ddply(d, yy, .fun = function(dd){
c(Mean = round(mean(dd[,xx],na.rm=TRUE),round),
Sd = round(sd(dd[,xx],na.rm=TRUE),round),
min=round(min(dd[,xx]),round),
Q1=round(quantile(dd[,xx],0.25),round),
Q2=round(quantile(dd[,xx],0.5),round),
Q3=round(quantile(dd[,xx],0.75),round),
Max=round(max(dd[,xx]),round)) })
return(t)
}
hist_bygroup=function(d,xx,yy,name){
if (!require("ggplot2")) install.packages("ggplot2")
ggplot(d, aes_string(x=xx, color=yy, fill=yy))+
geom_histogram(aes(y=..density..), alpha=0.5,
position="identity")+
geom_density(alpha=.3)+
ggtitle(name)
}
box_bygroup=function(d,xx,yy,name){
if (!require("ggplot2")) install.packages("ggplot2")
ggplot(d, aes_string(x=yy, y=xx, fill=yy)) +
geom_boxplot()+
ggtitle(name)
}
all_bygroup=function(d, xx, yy, round){
#the summary table
t=t_bygroup(d=d, xx, yy, round)
#the histogram
hist=hist_bygroup(d=data, xx, yy, paste("Histogram for", xx, "by", yy))
#the boxplot
box=box_bygroup(d=data, xx, yy, paste("Boxplot for", xx, "by", yy))
#the package for arrange plots
if (!require("gridExtra")) install.packages("gridExtra")
grid.arrange(hist,box, nrow=1)
grid.arrange(tableGrob(data.frame(t))) #make the output table become a plot
}
vars_num=c("satisf_level", "last_eval", "num_proj", "ave_mon_hrs", "time_spend")
y="left_or_not"
#the invisible() here is to hide the unwanted output from lapply
invisible(lapply(vars_num, all_bygroup, d=data, yy=y, round=2))
all_bygroup(data, xx="satisf_level", yy="left_or_not", round=2)
tab_bygroup=function(d, xx, yy, digits, prop.r, prop.c, prop.chisq){
if (!require("gmodels")) install.packages("gmodels")
CrossTable(x=d[[xx]], y=d[[yy]], digitd=digits, prop.r=prop.r,
prop.c=prop.c, prop.chisq=prop.chisq, format=c("SPSS"),
dnn=c(xx,yy))
}
vars_cat=c("work_accid", "promo_last_5yrs", "department", "salary")
tab_bygroup(data, xx="work_accid", yy="left_or_not",
digits=3, prop.r=T, prop.c=T, prop.chisq=T)
tab=function(xx,yy,df){
formula <- as.formula(paste("~", xx, "+", yy))
xtabs(data=df, formula)
}
# list all the combination of two categorical variables
tt=t(combn(c("work_accid","promo_last_5yrs",
"department","salary"),2))
# apply the function to all the combinations
tab_count=mapply(tab, tt[,1], tt[,2], list(data))
names(tab_count) = c(1:length(tab_count))
# sum of marginals
tab_sum=lapply(tab_count,addmargins)
print(tab_sum)
tab_sum[[1]]
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
rep("left_or_not",4)
tt=cbind(c("work_accid", "promo_last_5yrs", "department", "salary"),rep("left_or_not",4))
tt
?CrossTable
if (!require("gmodels")) install.packages("gmodels")
?CrossTable
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
#
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
# command = "jekyll build"
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
commandArgs(TRUE)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
X1=c(rep("yes",10),rep("no",40),rep("yes",70),rep("no",30))
X2=c(rep("yes",10),rep("no",10),rep("unsure",30),
rep("yes",40),rep("no",50),rep("unsure",10))
dat=data.fram(X1,X2, Type=c(rep("A",50),rep("B",100)))
X1=c(rep("yes",10),rep("no",40),rep("yes",70),rep("no",30))
X2=c(rep("yes",10),rep("no",10),rep("unsure",30),
rep("yes",40),rep("no",50),rep("unsure",10))
dat=data.frame(X1,X2, Type=c(rep("A",50),rep("B",100)))
head(dat)
table(dat)
?table
?xtab
library(gmodels)
CrossTable(dat$X1,dat$Type)
install.packages("kalR")
install.packages(c("backports", "chron", "coda", "colorspace", "colourpicker", "curl", "data.table", "digest", "forecastHybrid", "ggplot2", "git2r", "h2o", "Hmisc", "htmlTable", "jsonlite", "Matrix", "mgcv", "nlme", "openssl", "pbdZMQ", "Rcpp", "RcppArmadillo", "repr", "rgl", "rmarkdown", "rprojroot", "rsconnect", "selectr", "shiny", "shinyjs", "sp", "tidyr", "tseries", "webshot", "xml2", "zoo"))
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
library(e1071)
?naiveBayes
data(HouseVotes84, package = "mlbench")
naiveBayes(Type ~ ., data = dat)
m=naiveBayes(Type ~ ., data = dat)
predict(model, as.data.frame(X1="yes",X2="unsure"))
predict(m, as.data.frame(X1="yes",X2="unsure"))
predict(m, as.data.frame(c("yes","unsure")))
data(Titanic)
m <- naiveBayes(Survived ~ ., data = Titanic)
m
predict(m, as.data.frame(Titanic))
predict(m, as.data.frame(c("yes","unsure")))
data(Titanic)
head(Titanic)
(Titanic)
View(Titanic)
m=naiveBayes(Type ~ ., data = dat)
predict(m, as.data.frame(c(X1="yes",X2="unsure")))
as.data.frame(c(X1="yes",X2="unsure"))
predict(m, (c(X1="yes",X2="unsure")))
c(X1="yes",X2="unsure")
head(dat)
dat=data.frame(X1,X2, Type=c(rep("A",50),rep("B",100)))
test=data.frame(c(X1="yes",X2="unsure"))
test
test=data.frame(c("yes","unsure"))
test
test=data.frame("yes","unsure")
test
test=data.frame(X1="yes",X2="unsure")
test
p=predict(m, test)
m=naiveBayes(Type ~ ., data = dat)
p=predict(m, test)
p
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"),
script = c("Makefile", "build.R"),
serve = TRUE,
command = "bundle exec jekyll build")
View(dat)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
